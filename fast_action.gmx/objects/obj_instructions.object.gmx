<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_level</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_WIDTH;

// Create the grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0, 0, width, height, CELL_WIDTH, CELL_HEIGHT);

// Fill the grid with the void
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

// Fill the grid with the floor
ds_grid_set_region(grid, 5, 5, width - 5, height - 5, FLOOR);

// Place the walls
// Check every y position
for (var yy = 1; yy &lt; height - 1; yy ++){
    // Check every x position
    for (var xx = 1; xx &lt; width - 1; xx ++){
        // If the grid is a floor tile
        if (grid[# xx, yy] == FLOOR){
            // Check if the grids around it are floor if not make it a wall
            if (grid[# xx + 1, yy] != FLOOR){
                grid[# xx + 1, yy] = WALL;
            }
            if (grid[# xx - 1, yy] != FLOOR){
                grid[# xx - 1, yy] = WALL;
            }
            if (grid[# xx, yy + 1] != FLOOR){
                grid[# xx, yy + 1] = WALL;
            }
            if (grid[# xx, yy - 1] != FLOOR){
                grid[# xx, yy -1] = WALL;
            }
        }
    }
}


// Draw the level
for (var yy = 0; yy &lt; height; yy++){
    for (var xx = 0; xx &lt; width; xx++){
        if (grid [# xx ,yy] == FLOOR){
            // Draw the floor
            tile_add(bg_grass, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        } else {
            mp_grid_add_cell(grid_path, xx, yy);
        }
    }
}

// Get tile width
var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT /2;

// Add the tiles
for (var yy = 0; yy &lt; height * 2; yy ++){
    for (var xx = 0; xx &lt; width * 2; xx ++){
        if (grid[# xx div 2, yy div 2] == FLOOR){
            // Get the tiles x and y position
            var tx = xx * tw;
            var ty = yy * th;
            
            var right = grid[# (xx + 1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx - 1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy - 1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy + 1) div 2] != FLOOR;
            
            var top_right = grid[# (xx + 1) div 2, (yy - 1) div 2] != FLOOR;
            var top_left = grid[# (xx - 1) div 2, (yy - 1) div 2] != FLOOR;
            var bottom_right = grid[# (xx + 1) div 2, (yy + 1) div 2] != FLOOR;
            var bottom_left = grid[# (xx - 1) div 2, (yy + 1) div 2] != FLOOR;
            
            if (right){
                if (bottom){
                    tile_add(bg_tile, tw*4, th*1, tw, th, tx + tw, ty, -ty);
                } else if (top){
                    if (top_right){
                        tile_add(bg_tile, tw*4, th*0, tw, th, tx + tw, ty - th, -ty);
                    } else {
                        tile_add(bg_tile, tw*3, th*0, tw, th, tx, ty - th, -ty);
                    }
                    tile_add(bg_tile, tw*0, th*1, tw, th, tx + tw, ty, -ty);
                } else
                    tile_add(bg_tile, tw*0, th*1, tw, th, tx + tw, ty, -ty);
            }
            
            if (left){
                if (bottom) {
                    tile_add(bg_tile, tw*3, th*1, tw, th, tx - tw, ty, -ty);
                } else if (top) {
                    if (top_left){
                        tile_add(bg_tile, tw*3, th*0, tw, th, tx - tw, ty - th, -ty);
                    } else {
                        tile_add(bg_tile, tw*4, th*0, tw, th, tx, ty - th, -ty);
                    }
                    tile_add(bg_tile, tw*2, th*1, tw, th, tx - tw, ty, -ty);
                } else {
                    tile_add(bg_tile, tw*2, th*1, tw, th, tx - tw, ty, -ty);
                }
            }
            
            if (top){
                if (!top_right) {
                    tile_add(bg_tile, tw*2, th*2, tw, th, tx, ty - th, -ty);
                } else if (!top_left) {
                    tile_add(bg_tile, tw*0, th*2, tw, th, tx, ty - th, -ty);
                } else {
                    tile_add(bg_tile, tw*1, th*2, tw, th, tx, ty - th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_tile, tw*2, th*0, tw, th, tx, ty, -ty - tw);
                } else if (!bottom_left) {
                    tile_add(bg_tile, tw*0, th*0, tw, th, tx, ty, -ty - tw);
                } else {
                    tile_add(bg_tile, tw*1, th*0, tw, th, tx, ty, -ty - tw);
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart the room
ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the grids
if ds_exists(grid, ds_type_grid){
    ds_grid_destroy(grid);
}
mp_grid_destroy(grid_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the instructions
draw_text_transformed(20, 20, "Arrow Keys to Move", 2, 2, 0);
draw_text_transformed(20, 40, "Z to Dash", 2, 2, 0);
draw_text_transformed(20, 60, "X to Attack", 2, 2, 0);
draw_text_transformed(20, 80, "Find the Stairs to Move On", 2, 2, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
